// Code generated by go-bindata.
// sources:
// fonts/3-d.flf
// fonts/3x5.flf
// fonts/5lineoblique.flf
// fonts/acrobatic.flf
// fonts/alligator.flf
// fonts/alligator2.flf
// fonts/alphabet.flf
// fonts/avatar.flf
// fonts/banner.flf
// fonts/banner3-D.flf
// fonts/banner3.flf
// fonts/banner4.flf
// fonts/barbwire.flf
// fonts/basic.flf
// fonts/bell.flf
// fonts/big.flf
// fonts/bigchief.flf
// fonts/binary.flf
// fonts/block.flf
// fonts/bubble.flf
// fonts/bulbhead.flf
// fonts/calgphy2.flf
// fonts/caligraphy.flf
// fonts/catwalk.flf
// fonts/chunky.flf
// fonts/coinstak.flf
// fonts/colossal.flf
// fonts/computer.flf
// fonts/contessa.flf
// fonts/contrast.flf
// fonts/cosmic.flf
// fonts/cosmike.flf
// fonts/cricket.flf
// fonts/cursive.flf
// fonts/cyberlarge.flf
// fonts/cybermedium.flf
// fonts/cybersmall.flf
// fonts/diamond.flf
// fonts/digital.flf
// fonts/doh.flf
// fonts/doom.flf
// fonts/dotmatrix.flf
// fonts/drpepper.flf
// fonts/eftichess.flf
// fonts/eftifont.flf
// fonts/eftipiti.flf
// fonts/eftirobot.flf
// fonts/eftitalic.flf
// fonts/eftiwall.flf
// fonts/eftiwater.flf
// fonts/elite.flf
// fonts/epic.flf
// fonts/fender.flf
// fonts/fourtops.flf
// fonts/fuzzy.flf
// fonts/goofy.flf
// fonts/gothic.flf
// fonts/graffiti.flf
// fonts/hollywood.flf
// fonts/invita.flf
// fonts/isometric1.flf
// fonts/isometric2.flf
// fonts/isometric3.flf
// fonts/isometric4.flf
// fonts/italic.flf
// fonts/ivrit.flf
// fonts/jazmine.flf
// fonts/jerusalem.flf
// fonts/katakana.flf
// fonts/kban.flf
// fonts/larry3d.flf
// fonts/lcd.flf
// fonts/lean.flf
// fonts/letters.flf
// fonts/linux.flf
// fonts/lockergnome.flf
// fonts/madrid.flf
// fonts/marquee.flf
// fonts/maxfour.flf
// fonts/mike.flf
// fonts/mini.flf
// fonts/mirror.flf
// fonts/mnemonic.flf
// fonts/morse.flf
// fonts/moscow.flf
// fonts/nancyj-fancy.flf
// fonts/nancyj-underlined.flf
// fonts/nancyj.flf
// fonts/nipples.flf
// fonts/ntgreek.flf
// fonts/o8.flf
// fonts/ogre.flf
// fonts/pawp.flf
// fonts/peaks.flf
// fonts/pebbles.flf
// fonts/pepper.flf
// fonts/poison.flf
// fonts/puffy.flf
// fonts/pyramid.flf
// fonts/rectangles.flf
// fonts/relief.flf
// fonts/relief2.flf
// fonts/rev.flf
// fonts/roman.flf
// fonts/rot13.flf
// fonts/rounded.flf
// fonts/rowancap.flf
// fonts/rozzo.flf
// fonts/runic.flf
// fonts/runyc.flf
// fonts/sblood.flf
// fonts/script.flf
// fonts/serifcap.flf
// fonts/shadow.flf
// fonts/short.flf
// fonts/slant.flf
// fonts/slide.flf
// fonts/slscript.flf
// fonts/small.flf
// fonts/smisome1.flf
// fonts/smkeyboard.flf
// fonts/smscript.flf
// fonts/smshadow.flf
// fonts/smslant.flf
// fonts/smtengwar.flf
// fonts/speed.flf
// fonts/stampatello.flf
// fonts/standard.flf
// fonts/starwars.flf
// fonts/stellar.flf
// fonts/stop.flf
// fonts/straight.flf
// fonts/tanja.flf
// fonts/tengwar.flf
// fonts/term.flf
// fonts/thick.flf
// fonts/thin.flf
// fonts/threepoint.flf
// fonts/ticks.flf
// fonts/ticksslant.flf
// fonts/tinker-toy.flf
// fonts/tombstone.flf
// fonts/trek.flf
// fonts/tsalagi.flf
// fonts/twopoint.flf
// fonts/univers.flf
// fonts/usaflag.flf
// fonts/wavy.flf
// fonts/weird.flf
// DO NOT EDIT!

package figure

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fontsCybermediumFlf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\x51\x6f\xab\x36\x18\x7d\xf7\xaf\x38\x0f\x41\x24\x12\x7c\x24\x5d\x2a\xa5\x54\x4c\x48\x9b\xba\x75\xeb\xaa\x4a\xdd\xdb\xe8\x0c\x49\x4c\x87\x9a\x40\x05\xa4\x4d\x24\x94\xdf\x3e\x19\xbb\x24\xb4\x49\x74\xb9\xba\xf7\xe9\xd6\x89\x01\xe7\xf8\x1c\x1f\x1f\xdb\x24\x5e\xc4\x67\x51\x0f\x63\xfc\x84\x09\xec\x11\xce\x86\xec\x97\xcd\x54\xe4\x71\x96\x96\xb0\xb1\x14\xf3\x64\xb5\x64\x57\xc9\xe3\x42\x94\x98\x65\xe9\x8b\xc8\x8b\x24\x4b\x31\xdd\xe0\x4f\x91\x96\xb8\x8d\x8a\x42\xa4\x16\x9e\x44\x5a\xa6\xfe\x4c\x52\x8b\xe7\x68\x26\x28\xcb\x1f\x2d\x4c\xec\xd1\xc8\xbe\x18\xb3\xab\x3c\x5b\xba\x28\xca\x6c\xf6\xe4\xc7\xaf\x09\xad\x5e\x22\x4a\x17\xe8\xdf\x88\x34\x15\x79\x89\x7b\x89\x0c\xd8\xaf\x51\x29\x5c\x8c\xce\xf1\xc7\x6a\x81\xd1\xc5\xc5\x18\xc3\xa1\x3b\x1c\xbb\x67\xe7\xf8\xed\xaf\xbf\x19\xfb\x5d\xe4\x02\x51\x2e\x50\x64\x4b\x01\x69\xb1\x20\xdc\x66\xa9\x1d\x2b\x7f\xd7\xe6\x12\x51\x9c\x47\xc9\xdc\x42\x12\x63\x93\xad\xf0\x1a\xa5\x69\xa4\x8d\x97\x28\xff\x13\x4b\x0b\x53\xc1\x96\x1b\x3c\xae\x44\x51\x12\xae\xf1\x9c\x15\xa5\x98\x4b\x0c\x89\x14\x2e\xf3\x64\xa6\xc4\x31\x15\x71\x96\x0b\x62\xcc\xfe\xa6\x85\x31\xc8\x42\x6b\xa3\x2e\x6b\x42\x97\xb2\xa3\xd5\x32\x96\xd1\x94\x2e\x3a\xb4\x47\x63\x5a\xc6\x04\x06\x26\x10\x0c\x3a\xe8\xb8\x7d\x20\x94\x55\x0b\x59\xc6\xda\x18\x70\x5d\x06\x68\xe6\x8c\x1b\x08\xa4\x48\x21\x90\xa3\x04\x70\x8f\x12\x19\x66\x78\xd2\x42\x7d\x70\x00\x9c\xa3\x6f\xac\x6b\xa5\xbe\x61\x18\xdb\x7f\x27\x93\xbb\xed\x64\x72\x57\x75\xb0\x54\x6d\xbd\x9f\x41\x9e\xbd\x85\x61\x18\x03\xa5\xe4\xba\x04\x72\xad\x00\x64\x76\x50\x0a\x09\x8e\x55\x33\x5d\xa5\x14\x5e\x1a\x6e\x18\x10\x42\xdb\x44\x17\x4b\x40\x55\x73\xc8\x31\x5d\xc3\x35\x65\xe0\x61\xb8\x0e\x09\xb6\xe7\x79\x07\x2d\x7d\x38\x2c\x4d\x90\x21\x79\x9e\x67\x83\xcc\xb5\x59\x0b\xc1\x41\xe8\x86\xc4\x39\x5d\x76\x72\x04\xb8\x92\x64\xba\x26\x02\x06\x9a\x4f\xa6\x6a\xff\x10\x85\x1d\x37\xa4\x49\x9a\x29\x35\x58\x0f\x3d\xff\xdd\xc5\x67\x80\xe3\x33\x38\xf0\x19\x01\xb2\x09\xdf\x67\x44\x3e\x33\x4d\xd9\xaa\xab\xcf\xf4\xe7\xe4\x03\xc1\x67\x26\x3a\x92\x74\xe7\x37\xb2\x32\xc0\x38\xd7\x56\xb4\x1f\xd4\x5f\x92\xd7\xda\x31\x6a\xcb\xf0\x99\xf3\xd6\xe9\x4b\xc7\xfb\xba\x87\x5e\x3d\xb8\x1e\x5f\x35\x2c\xd5\x38\x41\xe2\x5c\x12\xf8\x83\xcf\x40\xcd\x4c\xf6\xd0\x7a\x92\x15\xe7\x95\xbc\xc9\x7d\xa8\x26\x02\x05\x42\x81\x0f\xbb\xdb\x1e\xc8\x15\x45\xf7\xe1\x07\x98\x40\xa0\x40\xe7\x00\xb3\x75\x3b\x02\xa2\x49\xb6\x35\xe6\x5b\x9f\x96\x21\xe0\xc4\x54\xea\x9f\x54\x55\x6b\x59\x0f\x2a\x9b\xbc\x6a\x62\x69\x24\x1c\xe5\x3e\xe0\x6d\x7d\x1c\x9f\xb0\x66\x06\xce\xc1\xc1\x35\x08\x05\x06\xd5\xc1\x1c\xab\x9d\xfb\x23\x2b\x70\x24\x0d\xcd\x3c\x28\xab\xa2\xd7\x0b\xf1\x0e\xfc\x47\xa9\xf3\x0f\x0b\xab\xa2\xd9\x5d\xdb\xd3\x38\xec\xb4\x05\x22\x70\x5a\x4e\xc1\x35\x5a\x69\x6e\xb5\x23\xef\xb1\x35\x8d\x3b\x1f\x82\x57\x28\xd7\xaa\xd5\x2e\x87\xbd\x94\xa0\x0e\x23\x9c\xd6\xca\x34\x5b\x3d\x50\xa4\x40\x75\x0d\x4e\x1d\xd8\x5d\xce\x4d\x1c\xfa\x8d\x04\x9f\x85\xfb\x2f\x97\xcf\xf3\xf3\x79\x7e\x7e\x90\xf3\x53\xa1\x55\xbf\xc3\xff\xdb\xff\x01\x00\x00\xff\xff\x21\xe3\xee\x74\x6d\x0c\x00\x00")

func fontsCybermediumFlfBytes() ([]byte, error) {
	return bindataRead(
		_fontsCybermediumFlf,
		"fonts/cybermedium.flf",
	)
}

func fontsCybermediumFlf() (*asset, error) {
	bytes, err := fontsCybermediumFlfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fonts/cybermedium.flf", size: 3181, mode: os.FileMode(436), modTime: time.Unix(1529341546, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _fontsDrpepperFlf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\xdd\x6e\xe3\x36\x13\xbd\xe7\x53\x1c\xe4\x33\x3e\xed\xa2\x89\x98\x68\x93\xa0\x5d\x08\xaa\x8a\x76\x0b\xf4\xae\x40\x7b\x49\x60\xc2\x58\x94\x2d\x54\x96\x02\x89\xee\x6e\x00\x3e\x7c\x41\x52\x92\xf5\x67\xaf\x01\x5b\x7f\x3c\x1c\xce\x9c\x19\x1e\x4e\x5e\xe6\x91\xdc\xe0\x09\x8f\x88\xee\x71\x8f\x87\x67\xf6\x7b\x5d\x69\xe0\x33\x7e\x6b\x42\xfc\xa9\xde\xde\x54\x83\x0f\x32\xd7\xaa\x81\x44\x25\x0f\x0a\x45\x85\xba\x52\x68\x8b\x1d\x32\xfb\x50\x54\xd0\xfb\xa2\x45\xab\xdf\x4b\xf5\x31\x64\xbf\x1c\xf5\xbe\x6e\x3e\xe3\x8b\x6a\x6a\xfc\x2d\x0f\x87\xa2\x52\xd5\x2d\xf4\xc3\xd3\xfd\xa7\x87\xa7\x74\xbb\x0d\xf5\x51\x87\x79\x11\x32\xf6\xeb\x5e\x36\x72\xab\x55\xd3\x22\xf8\x5f\x00\x59\x65\x08\xfe\x1f\x40\x36\x0a\x65\x7d\x6c\xdf\xdd\x97\x3f\x82\x03\xaa\x5a\xe3\x5f\xd5\xbc\xa3\x95\xba\x68\xf3\x42\x65\xec\x6b\xa1\xf7\xd0\x7b\x85\x60\x13\xa0\x6e\x10\xe8\x20\x0c\x43\xfc\x75\xdc\xed\x54\xab\x8b\xba\x6a\x7f\x66\xec\xcb\xb7\xb7\x52\x56\xd2\xbe\xa2\xce\x91\x17\x4d\xab\x51\x16\x95\xfa\xcc\x6c\xe8\xb8\xc3\xcd\x41\xee\x8a\x2d\xaa\xe3\xe1\x55\x35\x37\xc8\xeb\x06\x79\x51\x2a\x14\x99\xaa\x74\x91\x17\x5b\x3b\x97\x49\x00\xb8\x43\xbb\xaf\x8f\x65\x06\x59\x7e\x95\xef\x2d\x5e\x15\x5e\x64\x70\xeb\xe6\x54\xf5\x57\xb6\xf1\x20\xeb\xd3\xcd\x5e\x36\xd9\x6b\x29\xab\x7f\x6e\x70\x77\x87\xb7\xa6\xa8\x74\x8b\x16\x12\xee\xe3\x2d\x5e\x8f\x1a\x5b\x59\x05\xda\x5a\x69\x0f\xc7\x76\xaf\x32\xf6\xe4\x0d\xec\x55\xb1\xdb\x6b\xeb\xaf\xc4\xb6\x67\x88\x3d\x5e\x18\xbc\x75\x04\x15\xd5\xb6\x3c\x66\x45\xb5\x43\xa6\xda\xad\xaa\x32\xd5\xb4\x2c\xba\xf7\xf3\x0e\xf2\x9b\x0b\x1c\xa5\xaa\x76\x7a\x8f\x0f\xea\x5b\x8f\xde\xd6\x87\x83\xaa\x3c\x2f\xed\x47\xfc\x00\xe4\xc7\x6c\xa7\x90\xcb\xad\xae\x1b\xd6\x19\xc8\x54\x2e\x8f\xa5\xf6\xce\x1e\xea\x4c\xb9\xb8\x5d\xe6\xf3\xba\xd2\xec\xe1\xd9\xc1\x3c\x91\xd6\xbf\x89\x59\xc6\x36\xe9\xf8\x97\x32\x10\x52\x66\x60\x52\x66\x88\xa7\x2c\xa6\x24\x65\x00\xfc\x08\xa5\xcc\x70\xc3\xdd\x17\x4c\xae\xfe\xe6\xde\x37\x64\xc8\xd0\x66\xf4\x00\x18\x98\x1e\x7a\x42\xa7\x0c\xc6\x90\x5d\xe3\x2e\x4e\x19\x27\xbb\x1e\x8c\xe9\x86\xc9\x8e\x24\x1c\xf6\x23\x07\x87\x45\xf0\x38\xe9\x8c\x78\x7f\xac\x8d\x18\x89\xbd\xf1\x50\xf0\x4d\xca\x04\x71\xb1\x19\x63\xac\xc7\xf6\x7d\xf8\xdb\x8b\xb5\x0d\x67\xda\x3a\xd6\x5f\x21\x48\xa4\x29\x23\xb2\x48\x01\xe1\x1c\xb4\x4c\xf8\x2b\x27\x7e\xf2\x9c\xb8\xa0\x94\x25\x40\x6c\xe7\xf1\x09\x0d\xde\x2f\x90\x81\x71\x64\xda\x77\x32\x8e\x06\x5a\xd0\xd0\xfd\x4f\x7e\xf6\xce\x33\x10\xf9\xe9\xe4\x27\x0f\x64\x77\x98\xfe\x62\x41\xe3\x34\x75\xe1\x61\x46\xdd\x64\x76\x67\x1a\x70\x89\x06\xb7\xb7\x17\x22\x0a\x26\xf4\xa6\x8c\xfb\x71\x57\x0d\xe6\x54\x08\xe4\xd7\x04\x92\x61\x85\x98\x88\x92\xe9\x0a\x2e\xb5\xe4\xbc\x88\x09\xc2\x63\xf8\x38\x06\x4f\x35\x78\xe8\xf8\xe7\x04\x84\x03\x4f\x3d\x4d\x63\x77\x1d\x13\x2f\xe4\x8c\x99\x99\xb1\x13\x26\xb1\xb7\xd0\x62\x5e\xd6\x31\xe4\xc2\xbe\x48\x4d\x8c\xd0\x06\xc7\xbd\x1d\x71\x66\xad\xd0\xf3\x06\xcf\x34\x71\xcc\xe8\xf3\x69\x99\x27\x68\x3a\x62\xba\x59\xb3\xc2\x8c\x11\xf7\x25\xc9\xe6\xee\xfb\x82\x58\x29\x8f\x59\xf1\x26\x2e\x04\x1a\x57\x67\x9f\xba\xd0\xa7\xce\x8f\xc5\x94\xac\x16\xc7\x8d\x4b\xbe\xe8\x48\x3f\xcf\x40\x5f\x47\x64\xc6\xae\x8c\x30\xa7\x8c\x9c\xcb\x1a\x7c\xd6\x62\x4b\xc0\xf9\xb5\x84\xdf\xaa\xe6\xbb\xd9\x77\x01\x99\x65\x49\xae\x60\xcc\x22\xfb\xae\xee\xbb\x61\xc4\xc4\xbb\x42\x1a\xd6\xeb\xc5\x10\x27\x6f\xce\x10\x30\x48\xe9\x7c\x07\xb9\x21\x3f\x97\xdc\x55\x0c\xe6\x3b\xe3\xe4\xf7\xa5\x93\x28\x97\x4d\x43\x43\x2d\x8c\xd4\xaf\x13\xd6\x41\x6a\x68\x96\x01\xf4\xfc\x0a\x78\xf6\x30\x72\x75\xc0\x4e\x43\x12\x93\x90\xc4\x99\x9c\x9a\x21\xfa\x85\x70\x4c\xf3\x05\x1b\xd9\x1a\xcf\x6b\x76\xc4\x05\x3b\x8e\x8c\x39\x0b\xe4\x65\xca\xe5\x54\xd0\xaa\xcc\x0c\xbb\x9e\x3a\x2d\x77\xdc\x9f\x24\x66\x25\x9d\xc1\xba\x20\x2e\x31\x86\xe6\xbb\x7e\x84\x1a\x62\xeb\x91\x27\xec\xb0\x59\xed\xf9\x28\xec\x09\xe2\x76\xbb\x4d\x93\x3f\x5c\x04\xce\x56\x9b\xf0\x54\x2c\x42\x70\x8a\x6b\x7a\x35\xea\xc4\x6d\x5e\x10\xfd\x76\x33\xeb\xb5\xe3\x9d\xea\x24\xa4\x77\xc9\x1a\x58\xa3\xbd\x17\xd2\xee\x94\xa4\x61\x67\x5a\x3b\xe0\x76\x62\xcc\x45\x72\xbe\x5d\xb8\x78\xd6\xa5\xcc\x7e\x12\x66\x71\x7a\x8f\x67\x58\xe9\x32\x3e\xe5\x66\x6d\x73\x8c\x2b\x68\x7e\xfa\x8c\xed\x70\x18\x04\xb6\x82\x0c\x85\x13\x0c\x61\x88\x8c\xfb\x6a\x15\xb3\xb5\x66\x76\xc2\xae\x12\x27\x76\x7a\xde\xdd\x22\x06\xe6\x6e\x45\x7a\xe6\x76\xfc\x5a\x61\x1f\x5e\xb0\x1a\xd7\x19\xd5\x89\xbd\xc4\xad\xaa\x8e\x3f\x7a\x46\x8d\x4d\xbc\x30\x3e\x12\x9f\x85\xea\x9c\x95\xb4\x2e\x80\xf0\xb4\x05\x82\x7e\x8f\x2c\xb5\x66\x84\x1d\xed\x25\x73\x91\xd8\xb5\x93\x78\x5a\x3e\x2b\x92\x73\x96\xd8\xbe\x74\x7d\xb1\xf6\x98\xde\x1f\xc7\xdf\x32\x41\xde\xcc\xac\x65\x9d\x35\x7e\x1b\xd7\xf8\x4d\xdb\xde\x95\xc6\x6f\xba\xe0\x20\x80\x6b\x04\x4c\x74\x67\x26\x38\x18\xa3\xa6\xca\xb3\x14\x1c\x0f\x1d\x7a\x04\x9e\x32\x3e\x69\x30\xd6\x9d\x9a\x96\x60\x97\xb8\x53\xa7\xc2\xfd\xf3\xb2\x85\xe1\x4e\x69\xc5\xb8\xb7\x36\x66\xfa\x5f\xf6\x2c\xc6\x66\x10\xc6\x1b\xe6\x63\xaf\xb8\xe0\x76\x16\x17\x1c\x8b\x76\x38\x4e\x28\x4e\xbe\xd3\x8f\xcc\x31\x6b\x67\xd7\x80\xb9\x74\x0e\xf8\xa5\x3b\xe8\xcb\xba\x00\x4d\x30\x17\x6b\x77\xba\xe4\xbc\x04\x56\x7b\x28\x84\xe3\xfa\x7e\xf8\xe9\xf9\xaa\xf8\xa3\x87\xc7\xab\x38\x88\xa2\xfb\xab\x78\x88\xa2\x4f\x57\xf9\x17\x45\x3f\x5e\xc5\x59\xf4\xf8\x7c\x15\x6f\xd1\x53\x74\x15\x77\xff\x05\x00\x00\xff\xff\xe3\x40\x2f\xeb\x45\x11\x00\x00")

func fontsDrpepperFlfBytes() ([]byte, error) {
	return bindataRead(
		_fontsDrpepperFlf,
		"fonts/drpepper.flf",
	)
}

func fontsDrpepperFlf() (*asset, error) {
	bytes, err := fontsDrpepperFlfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fonts/drpepper.flf", size: 4421, mode: os.FileMode(436), modTime: time.Unix(1529341546, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}


// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fonts/cybermedium.flf":       fontsCybermediumFlf,
	"fonts/drpepper.flf":          fontsDrpepperFlf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"fonts": &bintree{nil, map[string]*bintree{
		"cybermedium.flf":       &bintree{fontsCybermediumFlf, map[string]*bintree{}},
		"drpepper.flf":          &bintree{fontsDrpepperFlf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
